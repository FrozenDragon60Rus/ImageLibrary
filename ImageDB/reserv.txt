<Window x:Class="ImageDB.DB"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ImageDB"
        mc:Ignorable="d"
        Title="DataBase" Height="450" Width="800">
    <Grid Name="Main">

        <DataGrid Name="ImageData" Height="356" Margin="10,0,0,50" VerticalAlignment="Bottom" AutoGenerateColumns="False" Grid.RowSpan="2" HorizontalAlignment="Left" Width="772" ItemsSource="{Binding TableList}" SelectionUnit="Cell" MouseDown="ImageData_MouseDown" MouseUp="ImageData_MouseUp" SelectionMode="Single" SelectedCellsChanged="ImageData_SelectedCellsChanged" SelectionChanged="ImageData_SelectionChanged" KeyUp="ImageData_KeyUp" >
            <DataGrid.Columns>
                <DataGridTextColumn Binding="{Binding ID}" ClipboardContentBinding="{x:Null}" Header="ID" Width="50" IsReadOnly="True" CanUserResize="False"/>
                <DataGridTextColumn Binding="{Binding Name}" ClipboardContentBinding="{x:Null}" Header="Name" Width="250" IsReadOnly="True">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="TextWrapping" Value="Wrap"/>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Binding="{Binding Tag}" ClipboardContentBinding="{x:Null}" Header="Tag" Width="430" IsReadOnly="True" Selector.IsSelected="True"/>
                <DataGridTextColumn Binding="{Binding Raiting}" ClipboardContentBinding="{x:Null}" Header="Rate" Width="40" IsReadOnly="false"/>
            </DataGrid.Columns>
        </DataGrid>
        <Button Content="Сформировать" HorizontalAlignment="Left" Margin="10,366,0,0" VerticalAlignment="Top" Width="158" Height="35" Click="Button_Click" Grid.Row="1"/>
        <Button Content="Сохранить" HorizontalAlignment="Left" Margin="173,366,0,0" VerticalAlignment="Top" Width="158" Height="35" Click="Button_Save" Grid.Row="1"/>
        <Button Content="Обновить" HorizontalAlignment="Left" Margin="336,366,0,0" VerticalAlignment="Top" Width="158" Height="35" Click="Button_Refresh" Grid.Row="1"/>
        <Button Content="Удалить" HorizontalAlignment="Left" Margin="499,366,0,0" VerticalAlignment="Top" Width="158" Height="35" Click="Button_Delete" KeyDown="Button_Delete_KeyDown" Grid.Row="1"/>
        <Button Content="Список" HorizontalAlignment="Left" Margin="704,366,0,0" VerticalAlignment="Top" Width="78" Height="35" Click="Button_Document_List"/>

    </Grid>
</Window>



private void ImageData_MouseUp(object sender, MouseButtonEventArgs e)
        {
            //DataGrid d = sender as DataGrid;
            num = TableList.IndexOf(ImageData.CurrentCell.Item as DBTable);
            /*if (d.SelectedCells.Count < 1 || d.CurrentCell.Column.Header.ToString() != "Tag") return;
            Vector Position = new Vector(
                                         d.Columns[0].Width.DisplayValue + d.Columns[1].Width.DisplayValue + d.Margin.Left,
                                         200);

            if (options != null)
                options.Close();

            options = new SearchBox(ref Main, Position, new Vector(d.CurrentColumn.Width.DisplayValue, ImageData.Height));
            options.ItemsSource = SeatchPatterns.Tag;
            options.MouseDoubleClick += SelectItem;
            options.MouseRightButtonUp += DeleteItem;
            options.MouseLeave += CloseItem;
            */
        }



#region ItemEvent
        private void SelectItem(object sender, EventArgs e)
        {
            ListBox items = sender as ListBox;
            if (items.SelectedItem == null) return;
            //Console.WriteLine(ImageData.SelectedIndex);
            TableList[num].Tag = SearchBox.CheckMatches(TableList[num].Tag, 
                                                        items.SelectedItem as string);
            ImageData.Items.Refresh();
            options.Close();
        }
        private void DeleteItem(object sender, EventArgs e)
        {
            ListBox items = sender as ListBox;
            if (items.SelectedItem == null) return;
            
            string item = items.SelectedItem as string;
            int pos = TableList[num].Tag.IndexOf(item);
            int sim = TableList[num].Tag.Length > item.Length ? 1 : 0;
            if (pos > 0) TableList[num].Tag = TableList[num].Tag.Remove(pos - 1, item.Length + 1);
            else if (pos == 0) TableList[num].Tag = TableList[num].Tag.Remove(pos, item.Length + sim);

            ImageData.Items.Refresh();
            options.Close();
        }
        private void CloseItem(object sender, EventArgs e)
        {
            options.Close();
        }
        #endregion

        public SearchBox options;
    #region searchBox
    public class SearchBox : ListBox
    {
        Grid parent;
        public SearchBox(ref Grid parent, Vector position, Vector size)
        {
            this.parent = parent;

            Margin = new Thickness(0, 30, 20, 0);
            VerticalAlignment = VerticalAlignment.Top;
            HorizontalAlignment = HorizontalAlignment.Right;
            MaxWidth = size.X;
            Height = size.Y - 45;
           
            Open();
        }

        /*public static ListBox searchBox(Vector position, double width)
        {
            ListBox LB = new ListBox();

            Console.WriteLine("X:" + position.X + " Y:" + position.Y);
            LB.Margin = new Thickness(0, 0, 0, 0);
            LB.Width = width;
            LB.Height = 100;
            return LB;
        }*/
        public void AddItems(string[] list)
        {
            ItemsSource = list;
            Items.Refresh();
        }
        public void Open()
        {
            parent.Children.Add(this);
        }
        public void Close()
        {
            if(parent.Children.Contains(this))
                parent.Children.Remove(this);
        }
        static public string CheckMatches(string text, string part)
        {
            if (text == string.Empty) return part;
            return text.Split(';').Contains(part)
                ? text
                : text += ";" + part;
        }
    }
    #endregion